冬季已经来临。 你的任务是设计一个有固定加热半径的供暖器向所有房屋供暖。

现在，给出位于一条水平线上的房屋和供暖器的位置，找到可以覆盖所有房屋的最小加热半径。

所以，你的输入将会是房屋和供暖器的位置。你将输出供暖器的最小加热半径。

说明:

给出的房屋和供暖器的数目是非负数且不会超过 25000。
给出的房屋和供暖器的位置均是非负数且不会超过10^9。
只要房屋位于供暖器的半径内(包括在边缘上)，它就可以得到供暖。
所有供暖器都遵循你的半径标准，加热的半径也一样。
示例 1:

输入: [1,2,3],[2]
输出: 1
解释: 仅在位置2上有一个供暖器。如果我们将加热半径设为1，那么所有房屋就都能得到供暖。
示例 2:

输入: [1,2,3,4],[1,4]
输出: 1
解释: 在位置1, 4上有两个供暖器。我们需要将加热半径设为1，这样所有房屋就都能得到供暖。


二分解法：

class Solution {
public:
    int findRadius(vector<int>& houses, vector<int>& heaters) {
        sort(heaters.begin(), heaters.end());
        int radius = 0;
        for(int h : houses) {
            radius = max(radius, binarySearch(h, heaters));
        }
        return radius;
    }
private:
    int binarySearch(int val, vector<int> heaters) {
        int left = 0;
        int right = heaters.size() - 1;
        int diff = INT_MAX;
        while(left < right) {
            int mid = left + (right - left) / 2;
            if(val < heaters[mid]) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        if(left > 0) {
            diff = min(abs(val - heaters[left]), abs(val - heaters[left - 1]));
        } 
        if(left < heaters.size() - 1) {
            diff = min(diff, abs(val - heaters[left + 1]));
        }
        diff = min(diff, abs(val - heaters[left]));
        return diff;
    }
};

双指针法：

class Solution {
public:
    int findRadius(vector<int>& houses, vector<int>& heaters) {
        sort(houses.begin(), houses.end());
        sort(heaters.begin(), heaters.end());
        int i = 0, res = 0;
        for(int house : houses) {
            while(i < heaters.size() - 1 && heaters[i] + heaters[i + 1] <= house * 2) {
                i++;
            }
            res = max(res, abs(heaters[i] - house));
        }
        return res;
    }
};
